# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NodeJoined(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 32

    # NodeJoined
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeJoined
    def Uuid(self, j = None):
        if j is None:
            return [self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0 + i * 1)) for i in range(self.UuidLength())]
        elif j >= 0 and j < self.UuidLength():
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0 + j * 1))
        else:
            return None

    # NodeJoined
    def UuidAsNumpy(self):
        return self._tab.GetArrayAsNumpy(flatbuffers.number_types.Uint8Flags, self._tab.Pos + 0, self.UuidLength())

    # NodeJoined
    def UuidLength(self):
        return 16

    # NodeJoined
    def UuidIsNone(self):
        return False

    # NodeJoined
    def PipelineUuid(self, j = None):
        if j is None:
            return [self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16 + i * 1)) for i in range(self.PipelineUuidLength())]
        elif j >= 0 and j < self.PipelineUuidLength():
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16 + j * 1))
        else:
            return None

    # NodeJoined
    def PipelineUuidAsNumpy(self):
        return self._tab.GetArrayAsNumpy(flatbuffers.number_types.Uint8Flags, self._tab.Pos + 16, self.PipelineUuidLength())

    # NodeJoined
    def PipelineUuidLength(self):
        return 16

    # NodeJoined
    def PipelineUuidIsNone(self):
        return False


def CreateNodeJoined(builder, uuid, pipelineUuid):
    builder.Prep(1, 32)
    for _idx0 in range(16 , 0, -1):
        builder.PrependUint8(pipelineUuid[_idx0-1])
    for _idx0 in range(16 , 0, -1):
        builder.PrependUint8(uuid[_idx0-1])
    return builder.Offset()
