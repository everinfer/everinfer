# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class KVData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KVData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKVData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KVData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KVData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # KVData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # KVData
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def KVDataStart(builder): builder.StartObject(3)
def Start(builder):
    return KVDataStart(builder)
def KVDataAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KVDataAddName(builder, name)
def KVDataAddItemType(builder, itemType): builder.PrependUint8Slot(1, itemType, 0)
def AddItemType(builder, itemType):
    return KVDataAddItemType(builder, itemType)
def KVDataAddItem(builder, item): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)
def AddItem(builder, item):
    return KVDataAddItem(builder, item)
def KVDataEnd(builder): return builder.EndObject()
def End(builder):
    return KVDataEnd(builder)